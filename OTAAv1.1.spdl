macro	JSIntKey= {pad06,Dev,pad16}k(Dev,Serv);macro	MIC = mac(JSIntKey,JoinReqType,Serv,DevNonce,SHDR,AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList);macro	AppSKey= {pad02,AppNonce,Serv,DevNonce,pad16}AppKey(Dev,Serv);macro	FNwkSIntKey={pad01,AppNonce,Serv,DevNonce,pad16}k(Dev,Serv);macro	SNwkSIntKey={pad03,AppNonce,Serv,DevNonce,pad16}k(Dev,Serv);macro	NwkSEncKey={pad04,AppNonce,Serv,DevNonce,pad16}k(Dev,Serv);const	pad01,pad02,pad06,pad16: Nonce;hashfunction	mac;secret AppKey:Nonce;protocol OTAAv1-1(Dev,Serv){	role Dev{		fresh	DevNonce:Nonce;		fresh	MHDR:Nonce;		claim(Dev,Running,Serv,MHDR,Serv,Dev,DevNonce);		send_1(Dev,Serv,MHDR,Serv,Dev,DevNonce,mac(k(Dev,Serv),MHDR,Serv,Dev,DevNonce));		var		AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList,JoinReqType:Nonce;		var		SHDR:Nonce;		recv_2(Serv,Dev,SHDR,{AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList,MIC}k(Dev,Serv));		claim(Dev,Commit,Serv,SHDR,JoinReqType,AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList); 		claim(Dev,Alive);		claim(Dev,Weakagree);		claim(Dev,Niagree);		claim(Dev,Nisynch);		claim(Dev,SKR,AppSKey);		claim(Dev,SKR,JSIntKey);	}	role	Serv{		var		DevNonce:Nonce;		var		MHDR:Nonce;		fresh	NonceList:Nonce;		recv_1(Dev,Serv,MHDR,Serv,Dev,DevNonce,mac(k(Dev,Serv),MHDR,Serv,Dev,DevNonce));		not match(DevNonce,NonceList);		macro NonceList = (DevNonce, NonceList);		fresh	AppNonce,NetID,DevAddr,JoinReqType,DLSetting,RxDelay,CFList:Nonce;		fresh	SHDR:Nonce;		claim(Serv,Running,Dev,SHDR,JoinReqType,AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList);		send_2(Serv,Dev,SHDR,{AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList,MIC}k(Dev,Serv));		claim(Serv,Commit,Dev,MHDR,Serv,Dev,DevNonce); 		claim(Serv,Alive); 		claim(Serv,Weakagree);		claim(Serv,Niagree);		claim(Serv,Nisynch);		claim (Serv,SKR,AppSKey);		claim (Serv,SKR,JSIntKey);	}}