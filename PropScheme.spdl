usertype Timestamp;macro JoinEUI = 	xor(r,	sk(Serv)	);macro DevEUI = 	xor(Dev,	h(r,sk(Serv))	);macro S1=	xor(n1, h(DevEUI,JoinEUI) );macro S2=	xor(n2, h(DevEUI,JoinEUI) );macro AppKey=	k(Dev, Serv);macro Ks=	h(n1,	n2,	AppKey);macro MIC=	h(DevEUI, DMHDR, JoinEUI, S1, n1, t1);macro S3Serv= { xor(nr, sk(Serv)), xor(Dev, h(nr,sk(Serv)) ), NetID, DevAddr, DLSetting, RxDelay, CFList}Ks;macro MICServ=	h(DevEUI, SMHDR, S2, S3Serv, n1, n2,t2, AppKey);function			xor;hashfunction	h;protocol @Xor(A,B){	role	A{		var	X,Y: Nonce;		recv_!1(A,A,xor(X,Y),Y);		send_!2(A,A,X);	}	role	B{		var	X,Y: Nonce;		recv_!3(B,B,xor(X,Y),X);		send_!4(B,B,Y);	}}protocol OurProtocol(Dev,	Serv){	role	Dev{		fresh	DMHDR: 	Nonce;		fresh	r,n1: 	Nonce;		fresh	t1:	Timestamp;		var	SMHDR:	Nonce;		var	n2,nr:	Nonce;		var	t2:	Timestamp;			send_1(Dev,	Serv, DMHDR, S1, MIC, t1);		var	NetID, DevAddr, DLSetting, RxDelay, CFList:	Nonce;			recv_2(Serv, Dev, SMHDR, S2, S3Serv, MICServ, t2 );		claim(Dev,SKR,Ks);		claim(Dev,SKR,h(Ks, n1,	n2));		claim(Dev,Niagree);		claim(Dev,Nisynch);	}	role	Serv{		var	DMHDR: 	Nonce;		var	n1,r: 	Nonce;		var	t1:	Timestamp;		fresh	NetID, DevAddr, DLSetting, RxDelay, CFList:	Nonce;		fresh	nr: Nonce;				recv_1(Dev,	Serv, DMHDR, S1, MIC, t1);				fresh		SMHDR:		Nonce;		fresh		n2:		Nonce;		fresh NonceList:	Timestamp;		fresh		t2:	Timestamp;		not match(t1,	NonceList);		macro NonceList = (t1, NonceList);				send_2(Serv, Dev, SMHDR, S2, S3Serv, MICServ, t2);				claim(Serv,SKR,sk(Serv));		claim(Serv,SKR,Ks);		claim(Serv,SKR,h(Ks, n1,	n2));		claim(Serv,Niagree);		claim(Serv,Nisynch);		}	}