macro MIC=mac(k(Dev,Serv),SHDR,AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList);macro NwkSKey={pad01,AppNonce,NetID,DevNonce,pad16}k(Dev,Serv);macro AppSKey={pad02,AppNonce,NetID,DevNonce,pad16}k(Dev,Serv);const pad01,pad02,pad16:Nonce;hashfunction mac;protocol OTAAv1-0(Dev,Serv){	role Dev{		fresh DevNonce:Nonce;		fresh MHDR:Nonce;		claim(Dev,Running,Serv,MHDR,Serv,Dev,DevNonce);		send_1(Dev,Serv,MHDR,Serv,Dev,DevNonce,mac(k(Dev,Serv),MHDR,Serv,Dev,DevNonce));		var AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList:Nonce;		var SHDR:Nonce;		recv_2(Serv,Dev,SHDR,{AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList,MIC}k(Dev,Serv));		claim(Dev,Commit,Serv,SHDR,AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList);		claim(Dev,Alive);		claim(Dev,Weakagree);		claim(Dev,Niagree);		claim(Dev,Nisynch);		claim(Dev,SKR,AppSKey);		claim(Dev,SKR,NwkSKey);	}	role Serv{		var DevNonce:Nonce;		var MHDR:Nonce;		fresh NonceList:Nonce;		recv_1(Dev,Serv,MHDR,Serv,Dev,DevNonce,mac(k(Dev,Serv),MHDR,Serv,Dev,DevNonce));		not match(DevNonce,NonceList);		macro NonceList=(DevNonce,NonceList);		fresh AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList:Nonce;		fresh SHDR:Nonce;		claim(Serv,Running,Dev,SHDR,AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList);		send_2(Serv,Dev,SHDR,{AppNonce,NetID,DevAddr,DLSetting,RxDelay,CFList,MIC}k(Dev,Serv));		claim(Serv,Commit,Dev,MHDR,Serv,Dev,DevNonce);		claim(Serv,Alive);		claim(Serv,Weakagree);		claim(Serv,Niagree);		claim(Serv,Nisynch);		claim(Serv,SKR,AppSKey);		claim(Serv,SKR,NwkSKey);	}}